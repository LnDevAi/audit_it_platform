@echo off
REM ==========================================
REM Script de Test CI/CD - E-DEFENCE Audit Platform (Windows)
REM ==========================================

setlocal enabledelayedexpansion

echo ==========================================
echo   Test CI/CD - E-DEFENCE Audit Platform
echo ==========================================
echo.

REM V√©rification des pr√©requis
echo [INFO] V√©rification des pr√©requis...

REM V√©rifier Node.js
node --version >nul 2>&1
if errorlevel 1 (
    echo [ERROR] Node.js n'est pas install√©
    exit /b 1
)

REM V√©rifier npm
npm --version >nul 2>&1
if errorlevel 1 (
    echo [ERROR] npm n'est pas install√©
    exit /b 1
)

REM V√©rifier Docker
docker --version >nul 2>&1
if errorlevel 1 (
    echo [ERROR] Docker n'est pas install√©
    exit /b 1
)

echo [SUCCESS] Tous les pr√©requis sont install√©s

REM V√©rification de la structure du projet
echo [INFO] V√©rification de la structure du projet...

if not exist "backend\package.json" (
    echo [ERROR] Fichier backend\package.json manquant
    exit /b 1
)

if not exist "backend\server.js" (
    echo [ERROR] Fichier backend\server.js manquant
    exit /b 1
)

if not exist "docker-compose.yml" (
    echo [ERROR] Fichier docker-compose.yml manquant
    exit /b 1
)

if not exist ".github\workflows\ci.yml" (
    echo [ERROR] Fichier .github\workflows\ci.yml manquant
    exit /b 1
)

if not exist "README.md" (
    echo [ERROR] Fichier README.md manquant
    exit /b 1
)

if not exist "GITHUB_SECRETS.md" (
    echo [ERROR] Fichier GITHUB_SECRETS.md manquant
    exit /b 1
)

echo [SUCCESS] Structure du projet correcte

REM V√©rification de la configuration ESLint
echo [INFO] V√©rification de la configuration ESLint...

if not exist "backend\.eslintrc.js" (
    echo [ERROR] Fichier backend\.eslintrc.js manquant
    exit /b 1
)

if not exist "backend\.prettierrc" (
    echo [ERROR] Fichier backend\.prettierrc manquant
    exit /b 1
)

echo [SUCCESS] Configuration ESLint/Prettier correcte

REM V√©rification des tests
echo [INFO] V√©rification des tests...

if not exist "backend\tests" (
    echo [ERROR] R√©pertoire backend\tests manquant
    exit /b 1
)

if not exist "backend\tests\integration" (
    echo [ERROR] R√©pertoire backend\tests\integration manquant
    exit /b 1
)

if not exist "backend\tests\performance" (
    echo [ERROR] R√©pertoire backend\tests\performance manquant
    exit /b 1
)

echo [SUCCESS] Tests trouv√©s

REM V√©rification des scripts
echo [INFO] V√©rification des scripts...

if not exist "scripts\monitoring.js" (
    echo [ERROR] Script scripts\monitoring.js manquant
    exit /b 1
)

if not exist "scripts\generate-secrets.js" (
    echo [ERROR] Script scripts\generate-secrets.js manquant
    exit /b 1
)

if not exist "scripts\security-check.js" (
    echo [ERROR] Script scripts\security-check.js manquant
    exit /b 1
)

echo [SUCCESS] Scripts utilitaires pr√©sents

REM V√©rification de la configuration Docker
echo [INFO] V√©rification de la configuration Docker...

if not exist "backend\Dockerfile" (
    echo [ERROR] Fichier backend\Dockerfile manquant
    exit /b 1
)

echo [SUCCESS] Configuration Docker correcte

REM V√©rification des variables d'environnement
echo [INFO] V√©rification des variables d'environnement...

if not exist "backend\env.example" (
    echo [ERROR] Fichier backend\env.example manquant
    exit /b 1
)

echo [SUCCESS] Configuration des variables d'environnement correcte

REM V√©rification du pipeline CI/CD
echo [INFO] V√©rification du pipeline CI/CD...

echo [SUCCESS] Pipeline CI/CD configur√©

REM Test des d√©pendances npm
echo [INFO] Test des d√©pendances npm...

cd backend

if not exist "package.json" (
    echo [ERROR] package.json manquant dans le backend
    exit /b 1
)

echo [SUCCESS] Scripts npm configur√©s correctement

cd ..

REM Test de compilation
echo [INFO] Test de compilation...

cd backend

REM Installer les d√©pendances si n√©cessaire
if not exist "node_modules" (
    echo [INFO] Installation des d√©pendances...
    npm ci
)

REM Test de linting
echo [INFO] Test du linting...
npm run lint
if errorlevel 1 (
    echo [ERROR] Erreurs de linting d√©tect√©es
    exit /b 1
)

echo [SUCCESS] Linting r√©ussi

REM Test de formatage
echo [INFO] Test du formatage...
npm run format:check
if errorlevel 1 (
    echo [ERROR] Probl√®mes de formatage d√©tect√©s
    exit /b 1
)

echo [SUCCESS] Formatage correct

cd ..

REM Test de Docker
echo [INFO] Test de Docker...

REM V√©rifier que Docker fonctionne
docker info >nul 2>&1
if errorlevel 1 (
    echo [ERROR] Docker n'est pas accessible
    exit /b 1
)

REM Test de la syntaxe docker-compose
docker-compose config >nul 2>&1
if errorlevel 1 (
    echo [ERROR] Erreur dans la configuration docker-compose
    exit /b 1
)

echo [SUCCESS] Docker fonctionne correctement

REM G√©n√©ration du rapport
echo [INFO] G√©n√©ration du rapport de test...

set "report_file=ci-test-report.md"

(
echo # Rapport de Test CI/CD - E-DEFENCE Audit Platform
echo.
echo **Date** : %date% %time%
echo **Version** : Non tagu√©
echo.
echo ## ‚úÖ Tests R√©ussis
echo.
echo - [x] Pr√©requis syst√®me
echo - [x] Structure du projet
echo - [x] Configuration ESLint/Prettier
echo - [x] Tests unitaires et d'int√©gration
echo - [x] Scripts utilitaires
echo - [x] Configuration Docker
echo - [x] Variables d'environnement
echo - [x] Pipeline CI/CD
echo - [x] D√©pendances npm
echo - [x] Compilation et linting
echo - [x] Configuration Docker
echo.
echo ## üìä Informations Syst√®me
echo.
echo - **Node.js** : 
node --version
echo - **npm** : 
npm --version
echo - **Docker** : 
docker --version
echo - **OS** : Windows
echo.
echo ## üîß Prochaines √âtapes
echo.
echo 1. Configurer les secrets GitHub (voir GITHUB_SECRETS.md)
echo 2. Tester le d√©ploiement en environnement de d√©veloppement
echo 3. Configurer le monitoring de production
echo 4. Effectuer les tests de charge
echo.
echo ## üìù Notes
echo.
echo Ce rapport a √©t√© g√©n√©r√© automatiquement par le script de test CI/CD.
) > "%report_file%"

echo [SUCCESS] Rapport g√©n√©r√© : %report_file%

echo.
echo ==========================================
echo [SUCCESS] Tous les tests CI/CD ont r√©ussi !
echo ==========================================
echo.
echo [INFO] Le projet est pr√™t pour le d√©ploiement CI/CD
echo [INFO] N'oubliez pas de configurer les secrets GitHub

pause


