module.exports = (sequelize, DataTypes) => {
  const Vulnerability = sequelize.define('Vulnerability', {
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    site_id: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: {
        model: 'audit_sites',
        key: 'id'
      }
    },
    device_id: {
      type: DataTypes.INTEGER,
      allowNull: true,
      references: {
        model: 'network_devices',
        key: 'id'
      }
    },
    vulnerability_id: {
      type: DataTypes.STRING(100),
      allowNull: true
    },
    title: {
      type: DataTypes.STRING(500),
      allowNull: false,
      validate: {
        notEmpty: true
      }
    },
    description: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    severity: {
      type: DataTypes.ENUM('critical', 'high', 'medium', 'low', 'info'),
      allowNull: false
    },
    cvss_score: {
      type: DataTypes.DECIMAL(3, 1),
      allowNull: true,
      validate: {
        min: 0.0,
        max: 10.0
      }
    },
    category: {
      type: DataTypes.ENUM('network', 'web', 'system', 'database', 'application'),
      allowNull: false
    },
    affected_service: {
      type: DataTypes.STRING(255),
      allowNull: true
    },
    port: {
      type: DataTypes.INTEGER,
      allowNull: true,
      validate: {
        min: 1,
        max: 65535
      }
    },
    solution: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    references: {
      type: DataTypes.TEXT,
      allowNull: true,
      get() {
        const rawValue = this.getDataValue('references');
        return rawValue ? JSON.parse(rawValue) : [];
      },
      set(value) {
        this.setDataValue('references', JSON.stringify(value));
      }
    },
    scan_tool: {
      type: DataTypes.STRING(100),
      allowNull: true
    },
    status: {
      type: DataTypes.ENUM('open', 'fixed', 'mitigated', 'false_positive'),
      defaultValue: 'open'
    },
    discovered_at: {
      type: DataTypes.DATE,
      defaultValue: DataTypes.NOW
    }
  }, {
    tableName: 'vulnerabilities',
    timestamps: true,
    createdAt: 'discovered_at',
    updatedAt: 'updated_at',
    indexes: [
      {
        fields: ['severity']
      },
      {
        fields: ['status']
      },
      {
        fields: ['site_id', 'severity']
      }
    ]
  });

  // Associations
  Vulnerability.associate = (models) => {
    Vulnerability.belongsTo(models.AuditSite, {
      foreignKey: 'site_id',
      as: 'site'
    });
    Vulnerability.belongsTo(models.NetworkDevice, {
      foreignKey: 'device_id',
      as: 'device'
    });
  };

  return Vulnerability;
};
