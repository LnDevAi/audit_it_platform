name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  MYSQL_VERSION: '8.0'
  REDIS_VERSION: '7-alpine'

jobs:
  # Job de qualité du code
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run ESLint
      working-directory: ./backend
      run: npm run lint

    - name: Check code formatting
      working-directory: ./backend
      run: npm run format:check

    - name: Run security audit
      working-directory: ./backend
      run: npm audit --audit-level=moderate

  # Job de tests unitaires
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: audit_platform_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Create test environment file
      working-directory: ./backend
      run: |
        cp env.example .env
        echo "DB_HOST=localhost" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_NAME=audit_platform_test" >> .env
        echo "DB_USER=test_user" >> .env
        echo "DB_PASSWORD=test_password" >> .env
        echo "REDIS_HOST=localhost" >> .env
        echo "REDIS_PORT=6379" >> .env
        echo "NODE_ENV=test" >> .env
        echo "JWT_SECRET=test_jwt_secret_for_testing_only" >> .env

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"localhost" -P"3306" --silent; do
          sleep 1
        done

    - name: Wait for Redis
      run: |
        while ! redis-cli ping; do
          sleep 1
        done

    - name: Run database migrations
      working-directory: ./backend
      run: npm run migrate

    - name: Run unit tests
      working-directory: ./backend
      run: npm run test:ci

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Job de tests d'intégration
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: audit_platform_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Create test environment file
      working-directory: ./backend
      run: |
        cp env.example .env
        echo "DB_HOST=localhost" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_NAME=audit_platform_test" >> .env
        echo "DB_USER=test_user" >> .env
        echo "DB_PASSWORD=test_password" >> .env
        echo "REDIS_HOST=localhost" >> .env
        echo "REDIS_PORT=6379" >> .env
        echo "NODE_ENV=test" >> .env
        echo "JWT_SECRET=test_jwt_secret_for_testing_only" >> .env

    - name: Wait for services
      run: |
        while ! mysqladmin ping -h"localhost" -P"3306" --silent; do sleep 1; done
        while ! redis-cli ping; do sleep 1; done

    - name: Run database migrations
      working-directory: ./backend
      run: npm run migrate

    - name: Run integration tests
      working-directory: ./backend
      run: npm test -- tests/integration/

  # Job de tests de performance
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: audit_platform_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Create test environment file
      working-directory: ./backend
      run: |
        cp env.example .env
        echo "DB_HOST=localhost" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_NAME=audit_platform_test" >> .env
        echo "DB_USER=test_user" >> .env
        echo "DB_PASSWORD=test_password" >> .env
        echo "REDIS_HOST=localhost" >> .env
        echo "REDIS_PORT=6379" >> .env
        echo "NODE_ENV=test" >> .env
        echo "JWT_SECRET=test_jwt_secret_for_testing_only" >> .env

    - name: Wait for services
      run: |
        while ! mysqladmin ping -h"localhost" -P"3306" --silent; do sleep 1; done
        while ! redis-cli ping; do sleep 1; done

    - name: Run database migrations
      working-directory: ./backend
      run: npm run migrate

    - name: Run performance tests
      working-directory: ./backend
      run: npm test -- tests/performance/

  # Job de build Docker
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/audit-platform-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/audit-platform-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/audit-platform-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/audit-platform-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de déploiement
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/audit-platform
          docker-compose pull
          docker-compose up -d
          docker system prune -f

    - name: Health check
      run: |
        sleep 30
        curl -f http://${{ secrets.PROD_HOST }}/health || exit 1

    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ Production deployment successful!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ Production deployment failed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job de sécurité
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://localhost:5000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # Job de documentation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Generate API documentation
      working-directory: ./backend
      run: npm run docs:generate

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-documentation
        path: ./backend/docs/
        retention-days: 30

  # Job de rapport final
  final-report:
    name: Generate Final Report
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, performance-tests, security-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate test report
      run: |
        echo "## Test Results Summary" >> test-report.md
        echo "### Code Quality: ${{ needs.code-quality.result }}" >> test-report.md
        echo "### Unit Tests: ${{ needs.unit-tests.result }}" >> test-report.md
        echo "### Integration Tests: ${{ needs.integration-tests.result }}" >> test-report.md
        echo "### Performance Tests: ${{ needs.performance-tests.result }}" >> test-report.md
        echo "### Security Scan: ${{ needs.security-scan.result }}" >> test-report.md

    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-report.md
        retention-days: 30
