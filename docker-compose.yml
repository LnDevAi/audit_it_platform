version: '3.8'

services:
  # Base de donn√©es MySQL
  database:
    image: mysql:8.0
    container_name: audit_platform_db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-audit_root_password}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-audit_platform_saas}
      MYSQL_USER: ${MYSQL_USER:-audit_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-audit_password}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - audit_network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: audit_platform_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - audit_network

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: audit_platform_phpmyadmin
    restart: unless-stopped
    profiles:
      - dev
    environment:
      PMA_HOST: database
      PMA_PORT: 3306
      PMA_USER: ${MYSQL_USER:-audit_user}
      PMA_PASSWORD: ${MYSQL_PASSWORD:-audit_password}
    ports:
      - "127.0.0.1:8081:80"
    depends_on:
      - database
    networks:
      - audit_network

  # Backend API
  backend:
    build: ./backend
    container_name: audit_platform_backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DB_HOST: database
      DB_PORT: 3306
      DB_NAME: ${MYSQL_DATABASE:-audit_platform_saas}
      DB_USER: ${MYSQL_USER:-audit_user}
      DB_PASSWORD: ${MYSQL_PASSWORD:-audit_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_change_in_production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      PORT: 5000
      NODE_ENV: ${NODE_ENV:-production}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
      ENABLE_HSTS: ${ENABLE_HSTS:-false}
      REQUEST_LIMIT: ${REQUEST_LIMIT:-10mb}
    ports:
      - "127.0.0.1:5000:5000"
    depends_on:
      - database
    volumes:
      - ./backend/uploads:/app/uploads
    networks:
      - audit_network

  # Frontend React
  frontend:
    build: ./frontend
    container_name: audit_platform_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "-qO", "-", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - audit_network

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: audit_platform_prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - backend
    networks:
      - audit_network

  grafana:
    image: grafana/grafana:10.4.2
    container_name: audit_platform_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - ./monitoring/provisioning:/etc/grafana/provisioning
      - ./monitoring/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - audit_network

volumes:
  mysql_data:
  redis_data:

networks:
  audit_network:
    driver: bridge
